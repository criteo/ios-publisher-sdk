# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

default_platform(:ios)

project_dir = "CriteoPublisherSdk"
ad_viewer_dir = "CriteoAdViewer"
adapter_google_dir = "CriteoGoogleAdapter"
adapter_mopub_dir = "CriteoMoPubAdapter"

platform :ios do

  desc %(Run tests: Run Unit & Functional tests with retries)
  lane :test do
    scan(scheme: "CriteoAdViewer")
    scan(scheme: "CriteoGoogleAdapter")
    scan(scheme: "CriteoMoPubAdapter")
    multi_scan(
      workspace: "CriteoPublisherSdk.xcworkspace",
      scheme: "CriteoPublisherSdk",
      testplan: "CriteoPublisherSdk",
      try_count: 5,
      parallel_testrun_count: 2
    )
    pod_lib_lint
  end
  
  desc %(Run it_tests: Run Functional tests with retries)
  lane :it_test do
    # ensure wiremock is up and reachable locally before testing
    sh("nc", "-z", "-w5", "localhost", "9099",
        log: false,
        error_callback: lambda do |err|
            UI.shell_error!("üö® Please ensure running wiremock server to run the tests properly #{err}")
        end
    )
    multi_scan(
      workspace: "CriteoPublisherSdk.xcworkspace",
      scheme: "CriteoPublisherSdk",
      testplan: "CriteoPublisherSdk-Functional",
      try_count: 5,
      parallel_testrun_count: 2,
      output_directory: "./fastlane/functional_output",
      simulator_started_callback: lambda do |sim_udid|
        puts "üîê Add certificate to device #{sim_udid}"
        sh("xcrun","simctl","keychain","#{sim_udid}", "add-root-cert", "./wiremock/cert/wiremock.crt")
      end
    )
  end

  desc %(Check code format)
  lane :format_check do
    run_clang_format(
      script_path: "tools/clang-format/run-clang-format.py",
      extensions: "h,m",
      paths: [project_dir, ad_viewer_dir, adapter_google_dir, adapter_mopub_dir],
      executable: "tools/clang-format/clang-format",
    )
    # FIXME swift-format check for CI enforcement
    lint_swift(mode: :lint)
  end

  desc %(Format code)
  lane :format do
    files = Dir.chdir("..") do
      Dir.glob("#{project_dir}/**/*.{h,m}") +
      Dir.glob("#{ad_viewer_dir}/**/*.{h,m}") +
      Dir.glob("#{adapter_google_dir}/**/*.{h,m}") +
      Dir.glob("#{adapter_mopub_dir}/**/*.{h,m}")
    end

    clang_format(
      clang_format_path: "tools/clang-format/clang-format",
      inplace: true,
      style: "file",
      verbose: true,
      files: files,
    )

    sh("swift-format -ir ../Criteo*/")
    lint_swift(mode: :autocorrect)
  end

  desc %(Lint swift code)
  lane :lint_swift do |options|
    files = Dir.chdir("..") do
      Dir.glob("#{project_dir}/**/*.{swift}") +
      Dir.glob("#{ad_viewer_dir}/**/*.{swift}")
    end

    swiftlint(
      mode: options[:mode],
      executable: "Pods/SwiftLint/swiftlint",
      files: files,
    )
  end

  desc %(Sets marketing and bundle versions to a Xcode project)
  lane :set_versions do |options|
    increment_version_number(version_number: options[:marketing_version], xcodeproj: options[:xcodeproj])
    increment_build_number(build_number: options[:bundle_version], xcodeproj: options[:xcodeproj])
  end

  desc %(Sets cocoapods, marketing and bundle versions from a semver `version` and an optional `build` number)
  lane :version_bump do |options|
    version = options[:version]
    marketing_version = version.split("-")[0]
    bundle_version = options[:build] || 1
    puts "Bumping to #{version}, marketing_version=#{marketing_version}, bundle_version=#{bundle_version}"
    set_versions(
      marketing_version: marketing_version,
      bundle_version: bundle_version,
      xcodeproj: "CriteoPublisherSdk/CriteoPublisherSdk.xcodeproj",
    )
    set_versions(
      marketing_version: marketing_version,
      bundle_version: bundle_version,
      xcodeproj: "CriteoAdViewer/CriteoAdViewer.xcodeproj",
    )
    set_versions(
      marketing_version: marketing_version,
      bundle_version: bundle_version,
      xcodeproj: "CriteoGoogleAdapter/CriteoGoogleAdapter.xcodeproj",
    )
    set_versions(
      marketing_version: marketing_version,
      bundle_version: bundle_version,
      xcodeproj: "CriteoMoPubAdapter/CriteoMoPubAdapter.xcodeproj",
    )
    file_replace("CriteoPublisherSdk.podspec",
                 /(spec.version.*)".*"/, "\\1\"#{version}\"")
    file_replace("CriteoPublisherSdk/Sources/Public/CRConstants.h",
                 /(SDK_VERSION.*)".*"/, "\\1\"#{version}\"")
  end

  desc %(Generates Debug & Release frameworks zip archives)
  lane :archive do
    Dir.chdir("..") do
      sh("scripts/archive.sh")
    end
  end

  lane :github_release do |options|
    version = options[:version]
    assets = Dir.chdir("..") do
      Dir.glob("build/output/*.zip")
    end
    changelog = last_changelog rescue ""
    puts "üèî [GitHub] Releasing #{version}\nChangelog:\n#{changelog}\nAssets: #{assets}..."
    set_github_release(
      repository_name: "criteo/ios-publisher-sdk",
      name: version,
      tag_name: version,
      description: changelog,
      is_draft: true,
      is_prerelease: version.include?("-"),
      upload_assets: assets,
    )
  end

  desc %(Archive then release version to GitHub)
  lane :release_github do |options|
    if ref = options[:ref]
      # Only supports semver refs such refs/tags/x.y.z-rc1
      options[:version] = ref.split("/").last
    end
    github_release(options)
  end

  desc %(Release version to CocoaPods)
  lane :release_cocoapods do
    pod_push
  end

  def last_changelog
    File.open("../CHANGELOG.md").read
        .split(/----*\n/)[1] # Get last version section
        .lines[2..-1].join # Remove first line that contains version
        .strip!
  end

  def file_replace(filename, regex, replace)
    filename = "../" + filename
    puts "üèî Replacing in #{filename} #{regex} with #{replace}"
    File.write(filename, File.open(filename).read.gsub(regex, replace))
  end
end
